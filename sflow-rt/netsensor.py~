import requests, json, os

class NetworkSensor(object):
  def __init__ (self):
    self.groups = {'external':['10.0.0.0/8'],'internal':['10.0.0.0/8']}
    self.flows = {'keys':'ipsource,ipdestination','value':'bytes','filter':''} 
    #'filter':'sourcegroup=external&destinationgroup=internal'
    self.threshold = {'metric':'incoming','value':1}
    self.target = 'http://localhost:8008'
    self.eventurl = self.target + '/events/json?maxEvents=10&timeout=60'
  
  def flow_push(self):
    flow = "{'keys':'ipsource', value:'bytes',filter:'ipsource=10.0.0.2'}"
    r = requests.put(self.target + '/flow/p/json',data=json.dumps(flow))
    print 'r:', r.text
  
  def global_event_listener_push(self):
    r = requests.put(self.target + '/group/json',data=json.dumps(self.groups))
    r = requests.put(self.target + '/flow/incoming/json',data=json.dumps(self.flows))
    r = requests.put(self.target + '/threshold/incoming/json',data=json.dumps(self.threshold))

  def listen_event_fire(self):
    eventID = -1
    while 1 == 1:
      r = requests.get(self.eventurl + '&eventID=' + str(eventID))
      if r.status_code != 200: break
      events = r.json()
      if len(events) == 0: continue

      eventID = events[0]["eventID"]
      for e in events:
        if 'incoming' == e['metric']:
          r = requests.get(self.target + '/metric/' + e['agent'] + '/' 
          + e['dataSource'] + '.' + e['metric'] + '/json')
          metric = r.json()
          if len(metric) > 0:
            try:
              print metric[0]["topKeys"][0]["key"]
              print 'metric: \n', metric, '\n'
            except KeyError:
              continue

def main():
  ns = NetworkSensor()
  #ns.global_event_listener_push()
  #ns.listen_event_fire()
  ns.flow_push()

if __name__ == "__main__":
  main()

"""
r = requests.get('https://github.com/timeline.json')
print r.text
payload = {'some': 'data'}
print json.dumps(payload)
print payload
"""
