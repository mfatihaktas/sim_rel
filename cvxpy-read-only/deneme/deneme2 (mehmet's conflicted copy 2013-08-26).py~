from cvxpy import *
import pylab
from dub_step import *
"""
x = variable(name='x', attribute='nonnegative')

t_exp = 1-(x-1)+power_p(x-1, 2)-power_p(x-1, 3)+power_p(x-1, 4) \
        -power_p(x-1, 5)+power_p(x-1, 6)-power_p(x-1, 7)

print 't_exp: ', t_exp
print 't_exp.is_convex(): ', t_exp.is_convex()
"""
"""
x = variable(name='x')
x.value = 2
y = variable(name='y')
y.value = 2

exp = exp(-1*x)
f = quad_over_lin(1,y)
g = -log(x)
h = power_pos(g, 2)
print 'g.is_convex(): ', g.is_convex()
print 'h.is_convex(): ', h.is_convex()
print 'h: ', h

print 'exp.is_convex(): ', exp.is_convex()
print 'f: ', f
print 'f.is_convex(): ', f.is_convex()
"""
x =  variable(2, 2, name = 'x')
slack_time = 400

def tx_time(data_amount):
  global x
  # bw = x[0,0]
  return 1000*data_amount*quad_over_lin(1, x[0,0])

def obj():
  return power_pos((tx_time(1)-1),2)

def gl(val = None):
  p =  parameter(name = 'p')
  y =  parameter(2,1,name = 'p')
  y[0,0] = quad_over_lin(1, p) - 1
  y[1,0] = 0
  exp = max(y)
  if val == None: #return exp mode on
    return exp
  else:
    p.value = val
    return exp.value

def gr(val = None):
  p =  parameter(name = 'p')
  y =  parameter(2,1,name = 'p')
  y[0,0] = quad_over_lin(1, p) - 1
  y[1,0] = 0
  exp = -1*min(y)
  if val == None: #return exp mode on
    return exp
  else:
    p.value = val
    return exp.value

def f0(val):
  p =  parameter(name = 'p')
  exp = power_pos(quad_over_lin(1, quad_over_lin(1, p)), 2)
  #exp = power_pos(quad_over_lin(1, p), 2)
  #exp = quad_over_lin(1, p)
  p.value = val
  return exp.value

def d0(val = None):
  p =  parameter(name = 'p')
  exp = power_p(p-1, 1)
  if val == None: #return exp mode on
    return exp
  else:
    p.value = val
    return exp.value

def ds(val = None):
  p =  parameter(name = 'p')
  y =  parameter(2,1,name = 'p')
  y[0,0] = p-1
  y[1,0] = 0
  exp = min(y)
  if val == None: #return exp mode on
    return exp
  else:
    p.value = val
    return exp.value

def h0(val = None):
  p =  parameter(name = 'p')
  exp = power_p(p-1, 1)
  if val == None: #return exp mode on
    return exp
  else:
    p.value = val
    return exp.value

def func0(val = None):
  p =  parameter(name = 'p')
  y =  parameter(2,1,name = 'p')
  y[0,0] = p-1
  y[1,0] = 0
  exp_ = min(y)*power_p(p-1, 1)
  #
  z =  parameter(2,1,name = 'p')
  z[0,0] = quad_over_lin(1, p) - 1
  z[1,0] = 0
  exp = -1*min(z)+exp_
  
  if val == None: #return exp mode on
    return exp
  else:
    p.value = val
    return exp.value

def hgr(val = None):
  p =  parameter(name = 'p')
  y =  parameter(2,1,name = 'p')
  y[0,0] = p-1
  y[1,0] = 0
  exp_ = min(y)*power_p(p-1, 1)
  #
  z =  parameter(2,1,name = 'p')
  z[0,0] = quad_over_lin(1, p) - 1
  z[1,0] = 0
  exp__ = -1*min(z)+exp_
  #
  exp = quad_over_lin(1, (exp__-1))
  
  if val == None: #return exp mode on
    return exp
  else:
    p.value = val
    return exp.value

def print_func(func, file_name):
  var_vals = pylab.arange(-20, 20, 0.2) #0.1
  func_val_list = []
  print "for func: ", file_name ,"x, y: "
  for val in var_vals:
    y = func(val)
    print "{}, {}".format(val, y)
    func_val_list.append(y)
    
  pylab.plot(var_vals, func_val_list, 'b')
  pylab.title("")
  pylab.xlabel("x")
  pylab.ylabel("F(x)")
  pylab.grid()
  pylab.savefig(file_name + '.png')
  #pylab.show()
  pylab.close()

def main():
  """
  print 'obj(): ', obj()
  print 'obj().is_convex(): ', obj().is_convex()
  p = program(minimize(obj()),
              [
                geq(x, 0),
                leq(x, 100)
              ]
             )
  p.solve()
  p.show()
  print 'optimal point: '
  print 'x: \n', x.value
  print 'optimal value: '
  print 'obj: \n', obj().value
  """
  #print 'gl().is_convex(): ', gl().is_convex()
  #print 'gr().is_convex(): ', gr().is_convex()
  #print 'd0().is_convex(): ', d0().is_convex()
  #print 'func0().is_concave(): ', func0(None).is_concave()
  print 'hgr().is_convex(): ', hgr().is_convex()
  #
  #print 'func0: ', func0(None)
  print 'hgr: ', hgr(None)
  #
  #print_func(d0, 'd0') 
  #print_func(gl, 'gl')
  #print_func(gr, 'gr')
  #print_func(ds, 'ds')
  #print_func(h0, 'h0')
  #print_func(func0, 'func0')
  print_func(hgr, 'hgr')
  
  #print 'ds(2): ', ds(2)
  #print 'ds(-2): ', ds(-2)
  
if __name__ == "__main__":
  main()
